#!/usr/bin/env python
# Example config: https://github.com/ros/dynamic_reconfigure/blob/noetic-devel/cfg/Test.cfg

PACKAGE = "roi_viewpoint_planner"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

IDLE = gen.const("IDLE", int_t, 0, "Do nothing")
MAP_ONLY = gen.const("MAP_ONLY", int_t, 1, "Generate map, but do not plan viewpoints")
SAMPLE_AUTOMATIC = gen.const("SAMPLE_AUTOMATIC", int_t, 2, "Automatically select sampling algorithm")
SAMPLE_ROI_CONTOURS = gen.const("SAMPLE_ROI_CONTOURS", int_t, 3, "Sample viewpoints at ROI contours")
SAMPLE_ROI_ADJACENT = gen.const("SAMPLE_ROI_ADJACENT", int_t, 4, "Sample viewpoints at border close to ROIs")
SAMPLE_ROI_CENTERS = gen.const("SAMPLE_ROI_CENTERS", int_t, 5, "Sample viewpoints around ROI centers")
SAMPLE_EXPLORATION = gen.const("SAMPLE_EXPLORATION", int_t, 6, "Sample viewpoint pointing from workspace to sampling tree")
SAMPLE_CONTOURS = gen.const("SAMPLE_CONTOURS", int_t, 7, "Sample viewpoints at object contours")
SAMPLE_BORDER = gen.const("SAMPLE_BORDER", int_t, 8, "Sample viewpoints at border to unknown space")

mode_enum = gen.enum([ IDLE, MAP_ONLY, SAMPLE_AUTOMATIC, SAMPLE_ROI_CONTOURS, SAMPLE_ROI_ADJACENT, SAMPLE_ROI_CENTERS, SAMPLE_EXPLORATION, SAMPLE_CONTOURS, SAMPLE_BORDER],
                     "An enum to select the planner mode")

roi_sample_enum = gen.enum([SAMPLE_ROI_CONTOURS, SAMPLE_ROI_ADJACENT, SAMPLE_ROI_CENTERS],
                     "An enum to select ROI sampling method for automatic sampling")

expl_sample_enum = gen.enum([SAMPLE_EXPLORATION, SAMPLE_CONTOURS, SAMPLE_BORDER],
                     "An enum to select exploration sampling method for automatic sampling")

planner_enum = gen.enum([ gen.const("SBL", str_t, "SBLkConfigDefault", "Single-query Bi-directional Lazy collision checking planner"),
                          gen.const("EST", str_t, "ESTkConfigDefault", "Expansive Space Trees"),
                          gen.const("LBKPIECE", str_t, "LBKPIECEkConfigDefault", "Lazy Bi-directional KPIECE"),
                          gen.const("BKPIECE", str_t, "BKPIECEkConfigDefault", "Bi-directional KPIECE"),
                          gen.const("KPIECE", str_t, "KPIECEkConfigDefault", "Kinematic Planning by Interior-Exterior Cell Exploration"),
                          gen.const("RRT", str_t, "RRTkConfigDefault", "Rapidly-exploring Random Trees"),
                          gen.const("RRTConnect", str_t, "RRTConnectkConfigDefault", "RRT Connect"),
                          gen.const("RRTstar", str_t, "RRTstarkConfigDefault", "RRT*"),
                          gen.const("TRRT", str_t, "TRRTkConfigDefault", "Transition-based RRT"),
                          gen.const("PRM", str_t, "PRMkConfigDefault", "Probabilistic Roadmap Method"),
                          gen.const("PRMstar", str_t, "PRMstarkConfigDefault", "PRM*")],
                        "An enum to select the planner used for motion planning")

util_enum = gen.enum([ gen.const("SINGLE_RAY_UTILITY", int_t, 0, "Evaluate single ray from origin to target"),
                       gen.const("MULTI_RAY_UTILITY", int_t, 1, "Evaluate multiple rays in camera FOV"),
                       gen.const("ROI_VICINITY_UTILITY", int_t, 2, "Evaluate ROI vicinity around target"),
                       gen.const("ROI_OCCLUSION_UTILITY", int_t, 3, "Evaluate occusion of ROI")],
                     "An enum to choose utility for evaluating sampled viewpoints")

neighborhood_enum = gen.enum([ gen.const("NB_6", int_t, 6, "6-neighborhood"),
                               gen.const("NB_18", int_t, 18, "18-neighborhood"),
                               gen.const("NB_26", int_t, 26, "26-neighborhood")],
                            "An enum to select the neighborhood region")

gen.add("mode", int_t, 1 << 0, "Select the planner mode", 0, 0, 8, edit_method=mode_enum)

gen.add("activate_execution", bool_t, 1 << 1, "If activated, planner moves arm to best suitable sampled viewpoint",  True)

gen.add("require_execution_confirmation", bool_t, 1 << 2, "If activated, each planning step execution has to be confirmed by the user (via rqt)", False)

gen.add("sensor_min_range", double_t, 1 << 3, "Minimum range for the sensor", 0.3, 0, 2)

gen.add("sensor_max_range", double_t, 1 << 4, "Maximum range for the sensor", 0.5, 0, 2)

gen.add("insert_scan_if_not_moved", bool_t, 1 << 5, "Update octree even if camera position has not changed since last viewpoint", True)

gen.add("insert_scan_while_moving", bool_t, 1 << 7, "Update octree while camera is moving to target position", False)

gen.add("wait_for_scan", bool_t, 1 << 9, "Planner only plans next viewpoint if scan has been inserted since last viewpoint", False)

gen.add("publish_planning_state", bool_t, 1 << 11, "Publish whether the robot is moving and if scans have been inserted since last viewpoint", True)

gen.add("planner", str_t, 1 << 12, "Select the planner used for motion planning", "RRTConnectkConfigDefault", edit_method=planner_enum)

gen.add("planning_time", double_t, 1 << 13, "Choose maximum motion planning time", 5, 0, 30)

gen.add("use_cartesian_motion", bool_t, 1 << 14, "Try to move to viewpoints on cartesian path", False)

gen.add("compute_ik_when_sampling", bool_t, 1 << 15, "If true, IK is checked already during sampling, otherwise only during motion planning", False)

gen.add("velocity_scaling", double_t, 1 << 16, "Scaling factor for maximum joint velocity", 1.0, 0.01, 1.0)

gen.add("record_map_updates", bool_t, 1 << 17, "Store map updates in rosbag", False)

gen.add("record_viewpoints", bool_t, 1 << 18, "Store planned viewpoints in rosbag", False)

gen.add("activate_move_to_see", bool_t, 1 << 21, "Use move to see suggestions if available", False)

gen.add("move_to_see_exclusive", bool_t, 1 << 21, "Only use move to see for planning", False)

gen.add("m2s_delta_thresh", double_t, 1 << 21, "Minimum delta for move to see", 0.5, 0, 5)

gen.add("m2s_max_steps", int_t, 1 << 21, "Maximum move to see steps before switching", 3, 1, 10)

gen.add("publish_cluster_visualization", bool_t, 1 << 22, "Publish a visualization of the detected clusters with the map", False)
gen.add("minimum_cluster_size", int_t, 1 << 22, "Minimum size for cluster visualization", 10, 0, 100)
gen.add("cluster_neighborhood", int_t, 1 << 22, "Neighborhood region for cluster visualization", 26, 6, 26, edit_method=neighborhood_enum)

gen.add("auto_roi_sampling", int_t, 1 << 0, "Select the ROI sampling method for automatic sampling", 3, 3, 5, edit_method=roi_sample_enum)
gen.add("auto_expl_sampling", int_t, 1 << 0, "Select the exploration sampling method for automatic sampling", 7, 6, 8, edit_method=expl_sample_enum)

sampler_group = gen.add_group("Sampler configuration")

sampler_group.add("roi_max_samples", int_t, 1 << 0, "Select max samples for ROI sampling", 100, 1, 1000)
sampler_group.add("roi_util", int_t, 1 << 0, "Select utility for ROI sampling", 2, 0, 3, edit_method=util_enum)
sampler_group.add("expl_max_samples", int_t, 1 << 0, "Select max samples for exploration sampling", 100, 1, 1000)
sampler_group.add("expl_util", int_t, 1 << 0, "Select utility for exploration sampling", 2, 0, 3, edit_method=util_enum)

workspace = gen.add_group("Workspace")

workspace.add("ws_min_x", double_t, 1 << 23, "Workspace minimum x coordinate", -1.0, -10.0, 10.0)
workspace.add("ws_min_y", double_t, 1 << 23, "Workspace minimum y coordinate", -1.0, -10.0, 10.0)
workspace.add("ws_min_z", double_t, 1 << 23, "Workspace minimum z coordinate", -1.0, -10.0, 10.0)
workspace.add("ws_max_x", double_t, 1 << 24, "Workspace maximum x coordinate", 1.0, -10.0, 10.0)
workspace.add("ws_max_y", double_t, 1 << 24, "Workspace maximum y coordinate", 1.0, -10.0, 10.0)
workspace.add("ws_max_z", double_t, 1 << 24, "Workspace maximum z coordinate", 1.0, -10.0, 10.0)

samplingreg = gen.add_group("Sampling region")

samplingreg.add("sr_min_x", double_t, 1 << 25, "Sampling region minimum x coordinate", -1.0, -10.0, 10.0)
samplingreg.add("sr_min_y", double_t, 1 << 25, "Sampling region minimum y coordinate", -1.0, -10.0, 10.0)
samplingreg.add("sr_min_z", double_t, 1 << 25, "Sampling region minimum z coordinate", -1.0, -10.0, 10.0)
samplingreg.add("sr_max_x", double_t, 1 << 26, "Sampling region maximum x coordinate", 1.0, -10.0, 10.0)
samplingreg.add("sr_max_y", double_t, 1 << 26, "Sampling region maximum y coordinate", 1.0, -10.0, 10.0)
samplingreg.add("sr_max_z", double_t, 1 << 26, "Sampling region maximum z coordinate", 1.0, -10.0, 10.0)

gen.add("plan_with_trolley", bool_t, 1 << 27, "Run planner loop with moving trolley in between segments", False)
gen.add("trolley_move_length", double_t, 1 << 28, "Length in mm to move trolley between positions", 1000.0, -10000, 10000.0)
gen.add("trolley_time_per_segment", double_t, 1 << 28, "Time before moving to next position", 60.0, 0.0, 300.0)
gen.add("trolley_num_segments", int_t, 1 << 28, "Number of segments to move through", 6, 0, 20)
gen.add("trolley_plan_named_poses", bool_t, 1 << 28, "Explore named poses for each segment", True)

exit(gen.generate(PACKAGE, "planner_node", "Planner"))
