#!/usr/bin/env python
# Example config: https://github.com/ros/dynamic_reconfigure/blob/melodic-devel/cfg/Test.cfg

PACKAGE = "roi_viewpoint_planner"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

IDLE = gen.const("IDLE", int_t, 0, "Do nothing")
MAP_ONLY = gen.const("MAP_ONLY", int_t, 1, "Generate map, but do not plan viewpoints")
SAMPLE_AUTOMATIC = gen.const("SAMPLE_AUTOMATIC", int_t, 2, "Automatically select sampling algorithm")
SAMPLE_ROI_CONTOURS = gen.const("SAMPLE_ROI_CONTOURS", int_t, 3, "Sample viewpoints at ROI contours")
SAMPLE_ROI_ADJACENT = gen.const("SAMPLE_ROI_ADJACENT", int_t, 4, "Sample viewpoints at border close to ROIs")
SAMPLE_ROI_CENTERS = gen.const("SAMPLE_ROI_CENTERS", int_t, 5, "Sample viewpoints around ROI centers")
SAMPLE_EXPLORATION = gen.const("SAMPLE_EXPLORATION", int_t, 6, "Sample viewpoint pointing from workspace to sampling tree")
SAMPLE_CONTOURS = gen.const("SAMPLE_CONTOURS", int_t, 7, "Sample viewpoints at object contours")
SAMPLE_BORDER = gen.const("SAMPLE_BORDER", int_t, 8, "Sample viewpoints at border to unknown space")

mode_enum = gen.enum([ IDLE, MAP_ONLY, SAMPLE_AUTOMATIC, SAMPLE_ROI_CONTOURS, SAMPLE_ROI_ADJACENT, SAMPLE_ROI_CENTERS, SAMPLE_EXPLORATION, SAMPLE_CONTOURS, SAMPLE_BORDER],
                     "An enum to select the planner mode")

roi_sample_enum = gen.enum([SAMPLE_ROI_CONTOURS, SAMPLE_ROI_ADJACENT, SAMPLE_ROI_CENTERS],
                     "An enum to select ROI sampling method for automatic sampling")

expl_sample_enum = gen.enum([SAMPLE_EXPLORATION, SAMPLE_CONTOURS, SAMPLE_BORDER],
                     "An enum to select exploration sampling method for automatic sampling")

planner_enum = gen.enum([ gen.const("SBL", str_t, "SBLkConfigDefault", "Single-query Bi-directional Lazy collision checking planner"),
                          gen.const("EST", str_t, "ESTkConfigDefault", "Expansive Space Trees"),
                          gen.const("LBKPIECE", str_t, "LBKPIECEkConfigDefault", "Lazy Bi-directional KPIECE"),
                          gen.const("BKPIECE", str_t, "BKPIECEkConfigDefault", "Bi-directional KPIECE"),
                          gen.const("KPIECE", str_t, "KPIECEkConfigDefault", "Kinematic Planning by Interior-Exterior Cell Exploration"),
                          gen.const("RRT", str_t, "RRTkConfigDefault", "Rapidly-exploring Random Trees"),
                          gen.const("RRTConnect", str_t, "RRTConnectkConfigDefault", "RRT Connect"),
                          gen.const("RRTstar", str_t, "RRTstarkConfigDefault", "RRT*"),
                          gen.const("TRRT", str_t, "TRRTkConfigDefault", "Transition-based RRT"),
                          gen.const("PRM", str_t, "PRMkConfigDefault", "Probabilistic Roadmap Method"),
                          gen.const("PRMstar", str_t, "PRMstarkConfigDefault", "PRM*")],
                        "An enum to select the planner used for motion planning")

gen.add("mode", int_t, 1 << 0, "Select the planner mode", 0, 0, 8, edit_method=mode_enum)

gen.add("activate_execution", bool_t, 1 << 1, "If activated, planner moves arm to best suitable sampled viewpoint",  False)

gen.add("require_execution_confirmation", bool_t, 1 << 2, "If activated, each planning step execution has to be confirmed by the user (via rqt)", True)

gen.add("sensor_min_range", double_t, 1 << 3, "Minimum range for the sensor", 0.3, 0, 2)

gen.add("sensor_max_range", double_t, 1 << 4, "Maximum range for the sensor", 0.5, 0, 2)

gen.add("insert_occ_if_not_moved", bool_t, 1 << 5, "Update occupancy of octree even if camera position has not changed since last viewpoint", True)

gen.add("insert_roi_if_not_moved", bool_t, 1 << 6, "Update roi probability of octree even if camera position has not changed since last viewpoint", True)

gen.add("insert_occ_while_moving", bool_t, 1 << 7, "Update occupancy of octree while camera is moving to target position", False)

gen.add("insert_roi_while_moving", bool_t, 1 << 8, "Update roi probability of octree while camera is moving to target position", False)

gen.add("wait_for_occ_scan", bool_t, 1 << 9, "Planner only plans next viewpoint if occupancy has been inserted since last viewpoint", False)

gen.add("wait_for_roi_scan", bool_t, 1 << 10, "Planner only plans next viewpoint if roi has been inserted since last viewpoint", False)

gen.add("publish_planning_state", bool_t, 1 << 11, "Publish whether the robot is moving and if scans have been inserted since last viewpoint", True)

gen.add("planner", str_t, 1 << 12, "Select the planner used for motion planning", "RRTConnectkConfigDefault", edit_method=planner_enum)

gen.add("planning_time", double_t, 1 << 13, "Choose maximum motion planning time", 5, 0, 30)

gen.add("use_cartesian_motion", bool_t, 1 << 14, "Try to move to viewpoints on cartesian path", False)

gen.add("compute_ik_when_sampling", bool_t, 1 << 15, "If true, IK is checked already during sampling, otherwise only during motion planning", False)

gen.add("velocity_scaling", double_t, 1 << 16, "Scaling factor for maximum joint velocity", 1.0, 0.01, 1.0)

gen.add("record_map_updates", bool_t, 1 << 17, "Store map updates in rosbag", True)

gen.add("record_viewpoints", bool_t, 1 << 18, "Store planned viewpoints in rosbag", True)

gen.add("auto_roi_sampling", int_t, 1 << 19, "Select the ROI sampling method for automatic sampling", 3, 3, 5, edit_method=roi_sample_enum)

gen.add("auto_expl_sampling", int_t, 1 << 20, "Select the exploration sampling method for automatic sampling", 6, 6, 8, edit_method=expl_sample_enum)

exit(gen.generate(PACKAGE, "planner_node", "Planner"))
