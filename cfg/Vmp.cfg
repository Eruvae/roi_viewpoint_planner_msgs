#!/usr/bin/env python
# Example config: https://github.com/ros/dynamic_reconfigure/blob/noetic-devel/cfg/Test.cfg

PACKAGE = "view_motion_planner"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

IDLE = gen.const("IDLE", int_t, 0, "Do nothing")
MAP_ONLY = gen.const("MAP_ONLY", int_t, 1, "Generate map, but do not plan motion")
BUILD_GRAPH = gen.const("BUILD_GRAPH", int_t, 2, "Generate motion plan graph")
PLAN = gen.const("PLAN", int_t, 3, "Generate graph and plans optimal path")
PLAN_AND_EXECUTE = gen.const("PLAN_AND_EXECUTE", int_t, 4, "Generates graph, plans and executes path")
PLAN_WITH_TROLLEY = gen.const("PLAN_WITH_TROLLEY", int_t, 5, "Plan arm motions and move trolley")
EXPLORE_NAMED_POSES = gen.const("EXPLORE_NAMED_POSES", int_t, 6, "Move through a list of preconfigured poses")

mode_enum = gen.enum([ IDLE, MAP_ONLY, BUILD_GRAPH, PLAN, PLAN_AND_EXECUTE, PLAN_WITH_TROLLEY, EXPLORE_NAMED_POSES],
                     "An enum to select the planner mode")

ig_enum = gen.enum(
    [ gen.const("UNK_CELLS", int_t, 0, "Unknown cell count"),
      gen.const("UNK_CELLS_WEIGHTED_TARGET", int_t, 1, "Unknown cell * (target_vps + 1) / (total_vps + 1)")
    ], "An enum to select information gain computation")

goal_select_enum = gen.enum(
    [ gen.const("BEST_INFOGAIN", int_t, 0, "Select navigation goal with highest information gain"),
      gen.const("BEST_UTILITY", int_t, 1, "Select navigation goal with highest utilty")
    ], "An enum to select navigation goal selection criterium")

vp_select_enum = gen.enum(
    [ gen.const("RANGE", int_t, 0, "Sample viewpoint within range, then check if in workspace"),
      gen.const("WORKSPACE", int_t, 1, "Sample viewpoint randomly in workspace (ignore sensor min/max range"),
      gen.const("WORKSPACE_RANGE", int_t, 2, "Sample viewpoint randomly in workspace, then check range")
    ], "An enum to select viewpoint selection criterium")

gen.add("mode", int_t, 1 << 0, "Select the planner mode", 0, 0, len(mode_enum)-1, edit_method=mode_enum)

gen.add("ig_type", int_t, 1 << 1, "Select the information gain computation", 1, 0, len(ig_enum)-1, edit_method=ig_enum)

gen.add("max_nb_connect_count", int_t, 1 << 1, "Maximum neighbors to try to connect", 5, 1, 20)
gen.add("max_nb_connect_dist", double_t, 1 << 1, "Maximum distance for neighbors to connect", 2.0, 0.0, 20.0)
gen.add("max_start_state_connect_count", int_t, 1 << 1, "Maximum start state neighbors to try to connect", 5, 1, 20)
gen.add("max_start_state_connect_dist", double_t, 1 << 1, "Maximum distance for start state neighbors to connect", 10.0, 0.0, 20.0)
gen.add("discard_unconnected_vertices", bool_t, 1 << 1, "If true, viewpoints that cannot be connceted are deleted", True)

gen.add("graph_building_time", double_t, 1 << 2, "Time to build up graph", 5.0, 1.0, 20.0)
gen.add("graph_search_time", double_t, 1 << 2, "Maximum time to search graph for best path", 2.0, 1.0, 20.0)

gen.add("goal_select_type", int_t, 1 << 3, "Select navigation goal selection criterium", 0, 0, len(goal_select_enum)-1, edit_method=goal_select_enum)

gen.add("vp_select_type", int_t, 1 << 4, "Select viewpoint selection criterium", 2, 0, len(vp_select_enum)-1, edit_method=vp_select_enum)

gen.add("sensor_min_range", double_t, 1 << 5, "Minimum range for the sensor (for vp_select_type RANGE and WORKSPACE_RANGE)", 0.3, 0, 2)
gen.add("sensor_max_range", double_t, 1 << 6, "Maximum range for the sensor (for vp_select_type RANGE and WORKSPACE_RANGE)", 0.6, 0, 2)

gen.add("execution_cost_limit", double_t, 1 << 7, "Maximum joint distance to move in one step", 5.0, 0.0, 20.0)

gen.add("visualize_graph", bool_t, 1 << 8, "Visualize the searched graph", True)
gen.add("visualize_expanded", bool_t, 1 << 8, "Visualize expanded vertices (if false, only best utility path)", True)
gen.add("visualize_unexpanded", bool_t, 1 << 8, "Visualize unexpanded vertices", False)

gen.add("roi_target_ratio", double_t, 1 << 9, "Percentage of ROI targets selected", 0.5, 0.0, 1.0)
gen.add("expl_target_ratio", double_t, 1 << 10, "Percentage of expl targets selected", 0.3, 0.0, 1.0)
gen.add("border_target_ratio", double_t, 1 << 11, "Percentage of border targets selected", 0.2, 0.0, 1.0)

gen.add("trolley_move_length", double_t, 1 << 12, "Length in mm to move trolley between positions", 1000.0, -10000, 10000.0)
gen.add("trolley_time_per_segment", double_t, 1 << 12, "Time before moving to next position", 60.0, 0.0, 300.0)
gen.add("trolley_num_segments", int_t, 1 << 12, "Number of segments to move through", 5, 0, 20)
gen.add("trolley_plan_named_poses", bool_t, 1 << 12, "Explore named poses for each segment", False)

gen.add("trolley_num_vertical_segments", int_t, 1 << 12, "Number of vertical levels per horizontal segment", 2, 0, 20)
gen.add("trolley_lift_dist", double_t, 1 << 12, "Lift in mm for next level", 700.0, -10000.0, 10000.0)

gen.add("trolley_flip_workspace", bool_t, 1 << 12, "Explore both sides of the trolley by flipping workspace and sampling space", True)

gen.add("insert_scan_if_not_moved", bool_t, 1 << 13, "Update octree even if camera position has not changed since last viewpoint", True)
gen.add("insert_scan_while_moving", bool_t, 1 << 13, "Update octree while camera is moving to target position", False)

gen.add("fix_trajectories_on_execution", bool_t, 1 << 14, "Fix start state and recompute timings for each execution step", False)

gen.add("vpd_threshold", double_t, 1 << 15, "Minimum viewpoint dissimilarity to include it in the search", 0.2, 0.0, 1.0)
gen.add("vpd_dist_scaling", double_t, 1 << 15, "Viewpoint origin dissimilarity scaling", 0.1, 0.01, 1.0)

workspace = gen.add_group("Workspace")

workspace.add("ws_min_x", double_t, 1 << 16, "Workspace minimum x coordinate", -1.0, -10.0, 10.0)
workspace.add("ws_min_y", double_t, 1 << 16, "Workspace minimum y coordinate", -1.0, -10.0, 10.0)
workspace.add("ws_min_z", double_t, 1 << 16, "Workspace minimum z coordinate", -1.0, -10.0, 10.0)
workspace.add("ws_max_x", double_t, 1 << 17, "Workspace maximum x coordinate", 1.0, -10.0, 10.0)
workspace.add("ws_max_y", double_t, 1 << 17, "Workspace maximum y coordinate", 1.0, -10.0, 10.0)
workspace.add("ws_max_z", double_t, 1 << 17, "Workspace maximum z coordinate", 1.0, -10.0, 10.0)

samplingreg = gen.add_group("Sampling region")

samplingreg.add("sr_min_x", double_t, 1 << 18, "Sampling region minimum x coordinate", -1.0, -10.0, 10.0)
samplingreg.add("sr_min_y", double_t, 1 << 18, "Sampling region minimum y coordinate", -1.0, -10.0, 10.0)
samplingreg.add("sr_min_z", double_t, 1 << 18, "Sampling region minimum z coordinate", -1.0, -10.0, 10.0)
samplingreg.add("sr_max_x", double_t, 1 << 19, "Sampling region maximum x coordinate", 1.0, -10.0, 10.0)
samplingreg.add("sr_max_y", double_t, 1 << 19, "Sampling region maximum y coordinate", 1.0, -10.0, 10.0)
samplingreg.add("sr_max_z", double_t, 1 << 19, "Sampling region maximum z coordinate", 1.0, -10.0, 10.0)

exit(gen.generate(PACKAGE, "planner_node", "Vmp"))
