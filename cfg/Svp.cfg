#!/usr/bin/env python
# Example config: https://github.com/ros/dynamic_reconfigure/blob/noetic-devel/cfg/Test.cfg

PACKAGE = "semantic_view_planner"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

IDLE = gen.const("IDLE", int_t, 0, "Do nothing")
MAP_ONLY = gen.const("MAP_ONLY", int_t, 1, "Generate map, but do not plan motion")
BUILD_GRAPH = gen.const("BUILD_GRAPH", int_t, 2, "Generate motion plan graph")
PLAN = gen.const("PLAN", int_t, 3, "Generate graph and plans optimal path")
PLAN_AND_EXECUTE = gen.const("PLAN_AND_EXECUTE", int_t, 4, "Generates graph, plans and executes path")
PLAN_WITH_TROLLEY = gen.const("PLAN_WITH_TROLLEY", int_t, 5, "Plan arm motions and move trolley")
mode_enum = gen.enum([ IDLE, MAP_ONLY, BUILD_GRAPH, PLAN, PLAN_AND_EXECUTE, PLAN_WITH_TROLLEY], "An enum to select the planner mode")

NAIVE = gen.const("NAIVE", int_t, 0, "Naive cost function")
LEHNERT = gen.const("LEHNERT", int_t, 1, "Lehnert cost function")
RADIAL_EUCLIDIAN_DISTANCE = gen.const("RADIAL_EUCLIDIAN_DISTANCE", int_t, 2, "Radial euclidian distance cost function")
SOLINA = gen.const("SOLINA", int_t, 3, "Solina cost function")
SOLINA_DISTANCE = gen.const("SOLINA_DISTANCE", int_t, 4, "Solina distance cost function")
cost_type_enum = gen.enum([ NAIVE, LEHNERT, RADIAL_EUCLIDIAN_DISTANCE, SOLINA, SOLINA_DISTANCE], "An enum to select the cost function type for superellipsoid fitting")

gen.add("mode", int_t, 1 << 0, "Select the planner mode", 1, 0, len(mode_enum)-1, edit_method=mode_enum)

gen.add("cluster_density", double_t, 1 << 1, "Density of cluster points", 0.02, 0.001, 1.0)
gen.add("cluster_min_points", int_t, 1 << 1, "Minimum points per cluster", 10, 1, 100)

gen.add("stem_fitting_dist_thresh", double_t, 1 << 2, "Distance threshold for stem fitting", 0.01, 0.001, 1.0)
gen.add("stem_fitting_max_iterations", int_t, 1 << 2, "Maximum iterations for stem fitting", 10000, 1, 1000000)
gen.add("stem_fitting_min_probability", double_t, 1 << 2, "Minimum probability for stem fitting", 0.99, 0.0, 1.0)

gen.add("visualize_leaf_bb", bool_t, 1 << 2, "Visualize leaf bounding boxes", False)
gen.add("visualize_fruit_bb", bool_t, 1 << 2, "Visualize leaf bounding boxes", False)
gen.add("visualize_stem_bb", bool_t, 1 << 2, "Visualize leaf bounding boxes", True)

gen.add("stem_target_dist", double_t, 1 << 3, "Distance of targets from stem endpoint", 0.05, 0, 1.0)

gen.add("sensor_min_range", double_t, 1 << 5, "Minimum range for the sensor", 0.3, 0, 2)
gen.add("sensor_max_range", double_t, 1 << 6, "Maximum range for the sensor", 0.6, 0, 2)

superellipsoid_params = gen.add_group("Superellipsoid fitting")
superellipsoid_params.add("se_estimate_normals_search_radius", double_t, 1 << 4, "Search radius for normal estimation", 0.015, 0.001, 1.0)
superellipsoid_params.add("se_estimate_cluster_center_regularization", double_t, 1 << 4, "Regularization for cluster center estimation", 2.5, 0.0, 10.0)
superellipsoid_params.add("se_print_ceres_summary", bool_t, 1 << 4, "Print ceres summary", False)
superellipsoid_params.add("se_max_num_iterations", int_t, 1 << 4, "Maximum number of iterations", 100, 1, 1000)
superellipsoid_params.add("se_cost_type", int_t, 1 << 4, "Cost function type", 2, 0, len(cost_type_enum)-1, edit_method=cost_type_enum)
superellipsoid_params.add("se_missing_surfaces_num_samples", int_t, 1 << 4, "Number of samples for missing surfaces", 50, 1, 1000)
superellipsoid_params.add("se_missing_surfaces_threshold", double_t, 1 << 4, "Threshold for missing surfaces", 0.015, 0.001, 1.0)

workspace = gen.add_group("Workspace")

workspace.add("ws_min_x", double_t, 1 << 16, "Workspace minimum x coordinate", -1.0, -10.0, 10.0)
workspace.add("ws_min_y", double_t, 1 << 16, "Workspace minimum y coordinate", -1.0, -10.0, 10.0)
workspace.add("ws_min_z", double_t, 1 << 16, "Workspace minimum z coordinate", -1.0, -10.0, 10.0)
workspace.add("ws_max_x", double_t, 1 << 17, "Workspace maximum x coordinate", 1.0, -10.0, 10.0)
workspace.add("ws_max_y", double_t, 1 << 17, "Workspace maximum y coordinate", 1.0, -10.0, 10.0)
workspace.add("ws_max_z", double_t, 1 << 17, "Workspace maximum z coordinate", 1.0, -10.0, 10.0)

samplingreg = gen.add_group("Sampling region")

samplingreg.add("sr_min_x", double_t, 1 << 18, "Sampling region minimum x coordinate", -1.0, -10.0, 10.0)
samplingreg.add("sr_min_y", double_t, 1 << 18, "Sampling region minimum y coordinate", -1.0, -10.0, 10.0)
samplingreg.add("sr_min_z", double_t, 1 << 18, "Sampling region minimum z coordinate", -1.0, -10.0, 10.0)
samplingreg.add("sr_max_x", double_t, 1 << 19, "Sampling region maximum x coordinate", 1.0, -10.0, 10.0)
samplingreg.add("sr_max_y", double_t, 1 << 19, "Sampling region maximum y coordinate", 1.0, -10.0, 10.0)
samplingreg.add("sr_max_z", double_t, 1 << 19, "Sampling region maximum z coordinate", 1.0, -10.0, 10.0)

exit(gen.generate(PACKAGE, "planner_node", "Svp"))
